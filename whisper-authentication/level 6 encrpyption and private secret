//The ultimate encription with oauth20 for social websites 
require("dotenv").config();
const express = require("express");
const bodyParser = require("body-parser");
const ejs = require("ejs");
const mongoose = require("mongoose");
const session = require("express-session");
const passport = require("passport");
const passportLocalMongoose = require("passport-local-mongoose"); //passport local must be installed but not required
const GoogleStrategy = require("passport-google-oauth20").Strategy;// google strategy 
const findOrCreate = require("mongoose-findorcreate");// mongoose create package

//The order of this code is so important

const app = express();

app.set("view engine", "ejs");

app.use(bodyParser.urlencoded({
  extended: true
}));
app.use(express.static("public"));

app.use(session({
  secret: "Our little secret",
  resave: false,
  saveUninitialized: false
}));

app.use(passport.initialize());
app.use(passport.session());

mongoose.connect("mongodb://127.0.0.1:27017/userDB").then(() => {
    console.log("Connected to the database");
  })
  .catch(err => {
    console.error("Error connecting to the database:", err);
  });

  const secretSchema = new mongoose.Schema({  
    secrets: String
  });


  const userSchema = new mongoose.Schema({  //Updates the schema to accomodate more required data
    email: String,
    password: String,
    googleId: String,
    secretText: [secretSchema]
  });
// Adding plugins to all schemas
 userSchema.plugin(passportLocalMongoose);
 userSchema.plugin(findOrCreate);
 secretSchema.plugin(passportLocalMongoose);
 secretSchema.plugin(findOrCreate);
  
 const Secret = mongoose.model("Secret",secretSchema);
  const User = mongoose.model("User", userSchema);
  
  // updated version of  Serializing and DeSerializing sessions
passport.use(User.createStrategy());
passport.serializeUser(function(user, cb) {
  process.nextTick(function() {
    cb(null, { id: user.id, username: user.username });
  });
});

passport.deserializeUser(function(user, cb) {
  process.nextTick(function() {
    return cb(null, user);
  });
});

//Google strategy needs certain parameters to work, after setting credentials with google
passport.use(new GoogleStrategy({
  clientID: process.env.CLIENT_ID,
  clientSecret: process.env.CLIENT_SECRET,
  callbackURL: "http://127.0.0.1:3000/auth/google/secrets"
},
function(accessToken, refreshToken, profile, cb) {// fucntion used for google auth
  console.log(profile);
  User.findOrCreate({ googleId: profile.id }, function (err, user) {
    return cb(err, user);
  });
}
));


/////AUTHENTICATION//////

app.get("/",(req,res)=>{
    res.render("home")

});

app.get("/auth/google",
  passport.authenticate("google", { scope: ["profile"] }));// passport authenticate is the simplest fucntion from the passport package, same goes for facebook and other SM's. The correct route must be set according the the google credentials settings

app.get("/auth/google/secrets", 
  passport.authenticate("google", { failureRedirect: "/login" }),
  function(req, res) {
    // Successful authentication, redirect home.
    res.redirect("/secrets");
  });

app.get("/register",(req,res)=>{
    res.render("register")
    
});
app.get("/login",(req,res)=>{

    res.render("login")
    
});

app.get("/secrets", (req,res)=>{
  if (req.isAuthenticated()){
    res.render("secrets");
  }else{
    res.redirect("/login");
  }
});



app.post("/register",  (req,res)=>{
User.register({username: req.body.username }, req.body.password, (err)=>{
  if (err){
    console.log(err);
    res.send("Incorrect login details");
    res.redirect("/register");
  }else{
    passport.authenticate("local")(req,res,()=>{
      res.redirect("/secrets");
    })
  }
})

});

app.post("/login",(req,res)=>{
  const user = new User({
    username: req.body.username,
    password: req.body.password
  })
  req.login(user, function(err) {
    if (err) {
       console.log(err); 
      }else{
        passport.authenticate("local")(req,res,()=>{
          res.redirect("/secrets");
        })

      }
  });
});

app.get("/submit",(req,res)=>{
  if (req.isAuthenticated()){
    res.render("submit");
  }else{
    res.redirect("/login");
  }
});

app.post("/submit",(req,res)=>{
const submittedSecret = req.body.secret;
User.findById(req.user.id, (err, foundUser)=>{
  if (err){
    console.log(err);
  }else{
    if (foundUser){
      foundUser.secretText = submittedSecret;
      foundUser.save(()=>{
        res.redirect("/secrets")
      })
    }
  }
})

});


app.get("/logout",(req,res)=>{

  req.logout(function(err) {
    if (err) { 
      console.log(err); 
    }
    res.redirect("/");
 
});

});



let port = process.env.PORT;
if (port == null || port == "") {
  port = 3000;
}

app.listen(port,()=>{
console.log("Server Running on Port 3000")
});